// Generated by CoffeeScript 1.6.3
var DB, Model, RecordNotFound, pluralize, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

pluralize = require('pluralize');

DB = require("../../db/db");

RecordNotFound = (function(_super) {
  __extends(RecordNotFound, _super);

  function RecordNotFound() {
    _ref = RecordNotFound.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  return RecordNotFound;

})(Error);

Model = (function() {
  Model.RecordNotFound = RecordNotFound;

  Model.className = 'Model';

  Model.db = new DB();

  Model.prototype.changedAttributes = [];

  Model.prototype.isNewRecord = true;

  Model.tableName = function() {
    return pluralize(this.className.toLowerCase());
  };

  Model.fields = function(callback) {
    var _this = this;
    if (this._fields != null) {
      if (callback != null) {
        callback.call(this, null, this._fields);
      }
      return this._fields;
    }
    return this.db.loadFieldsFor(this.tableName(), function(err, fields) {
      if (err != null) {
        callback.call(_this, err);
        return;
      }
      _this._fields = fields;
      if (callback != null) {
        return callback.call(_this, null, fields);
      }
    });
  };

  Model.klass = function() {
    return this;
  };

  Model._parseRecords = function(records, rows) {
    var m, record, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = rows.length; _i < _len; _i++) {
      record = rows[_i];
      m = new this(record);
      m.isNewRecord = false;
      m.changedAttributes = [];
      _results.push(records.push(m));
    }
    return _results;
  };

  Model.all = function(callback) {
    var records,
      _this = this;
    records = [];
    this.db.loadAllFor(this.tableName(), function(err, rows) {
      if (err != null) {
        return callback.call(_this, err);
      }
      _this._parseRecords(records, rows);
      return callback.call(_this, null, records);
    });
    return records;
  };

  Model.where = function(conditions, callback) {
    var records,
      _this = this;
    if (conditions == null) {
      conditions = {};
    }
    if (callback == null) {
      return;
    }
    records = [];
    this.db.where(conditions, this.tableName(), function(err, rows) {
      if (err != null) {
        return callback.call(_this, err);
      }
      _this._parseRecords(records, rows);
      return callback.call(_this, null, records);
    });
    return records;
  };

  Model.find = function(id, callback) {
    var model,
      _this = this;
    model = new this;
    this.db.findById(id, this.tableName(), function(err, row) {
      var key, value;
      if (err != null) {
        return callback.call(_this, err);
      }
      if (row == null) {
        return callback.call(_this, new _this.RecordNotFound("Record with id " + id + " not found"));
      }
      _this.isNewRecord = false;
      for (key in row) {
        value = row[key];
        model.set(key, value);
      }
      model.changedAttributes = [];
      return callback.call(_this, null);
    });
    return model;
  };

  Model.create = function(attributes, callback) {
    return new this(attributes).save(callback);
  };

  function Model(attributes) {
    var attribute, key;
    if (attributes == null) {
      attributes = {};
    }
    this.defineProperties();
    for (key in attributes) {
      attribute = attributes[key];
      this[key] = attribute;
    }
    this;
  }

  Model.prototype.save = function(callback) {
    var field, saveCallback, values, _i, _len, _ref1,
      _this = this;
    if (this.changedAttributes.length === 0) {
      return callback.call(this, null, []);
    }
    saveCallback = function(err, row) {
      var changedFields, field, value;
      if (err != null) {
        return callback.call(_this, err);
      }
      changedFields = [];
      for (field in row) {
        value = row[field];
        _this.set(field, value);
        changedFields.push(field);
      }
      _this.changedAttributes = [];
      return callback.call(_this, null, changedFields);
    };
    values = [];
    _ref1 = this.changedAttributes;
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      field = _ref1[_i];
      values.push(this.get(field));
    }
    if (this.isNewRecord) {
      this.constructor.db.insertRow(this.constructor.tableName(), this.changedAttributes, values, saveCallback);
    } else {
      this.constructor.db.updateRow(this.constructor.tableName(), this.id, this.changedAttributes, values, saveCallback);
    }
    return this;
  };

  Model.prototype.get = function(field) {
    return this["_" + field] || null;
  };

  Model.prototype.set = function(field, value) {
    if (this.changedAttributes.indexOf(field) === -1 && this["_" + field] !== value) {
      this.changedAttributes.push(field);
    }
    return this["_" + field] = value;
  };

  Model.prototype.defineProperties = function() {
    var _this = this;
    return this.constructor.fields(function(err, fields) {
      return fields.forEach(function(field) {
        return Object.defineProperty(_this, field, {
          get: function() {
            return _this.get(field);
          },
          set: function(value) {
            return _this.set(field, value);
          },
          enumerable: true
        });
      });
    });
  };

  Model.prototype.toJSON = function() {
    var attributes, key, value, _ref1;
    attributes = {};
    _ref1 = this.constructor.fields();
    for (key in _ref1) {
      value = _ref1[key];
      attributes[value] = this.get(value);
    }
    return attributes;
  };

  return Model;

})();

Model.fields();

module.exports = Model;
