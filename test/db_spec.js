// Generated by CoffeeScript 1.6.3
var assert, database, db, fs, migration, should;

fs = require('fs');

assert = require("assert");

should = require('should');

migration = {
  action: 'createTable',
  tableName: 'comments',
  fields: [
    {
      name: "author_id",
      type: "integer"
    }, {
      name: "title",
      type: "string"
    }, {
      name: "body",
      type: "text"
    }
  ]
};

database = "./db/database_test.sqlite";

if (fs.existsSync(database)) {
  fs.unlinkSync(database);
}

db = require("" + __dirname + "/../db/db")('test');

describe('DB', function() {
  return describe('#methods', function() {
    return describe('#createDatabase', function() {
      it('should create an empty database', function() {
        db.createDatabase();
        fs.existsSync(db.database).should.be["true"];
        return fs.readFileSync(db.database, 'utf8').length.should.equal(0);
      });
      it('should open db', function() {
        var connection;
        connection = db.openDatabase();
        return connection.filename.should.equal(db.database);
      });
      it('should migrate db', function() {});
      return describe('Generates data for DB', function() {
        var err;
        err = null;
        before(function(done) {
          return db.executeMigration(migration, function(_err, index) {
            err = err;
            return done();
          });
        });
        describe('Data migration', function() {
          it('should not have a error', function() {
            return should.not.exist(err);
          });
          return it('should have the wanted fields', function(done) {
            return db.loadFieldsFor('comments', function(err, fields) {
              should.not.exist(err);
              migration.fields.map(function(field) {
                return fields.should.include(field.name);
              });
              return done();
            });
          });
        });
        describe('test data manipulation', function() {
          it('should insert a new record', function(done) {
            return db.insertRow('comments', ['author_id', 'title', 'body'], [3, 'testen', 'testet'], function(err, row) {
              should.not.exist(err);
              row.author_id.should.equal(3);
              row.title.should.equal('testen');
              row.body.should.equal('testet');
              return done();
            });
          });
          it('should insert a second new record', function(done) {
            return db.insertRow('comments', ['author_id', 'title', 'body'], [4, 'record', 'mega toll'], function(err, row) {
              should.not.exist(err);
              row.author_id.should.equal(4);
              row.title.should.equal('record');
              row.body.should.equal('mega toll');
              return done();
            });
          });
          it('should not be insert a row in a non existing table', function(done) {
            return db.insertRow('non_existing_table', ['author_id', 'title', 'body'], [3, 'testen', 'testet'], function(err, row) {
              should.exist(err);
              return done();
            });
          });
          return it('should update an existing record', function(done) {
            return db.updateRow('comments', 1, ['title', 'body'], ['mega', 'bla'], function(err, row) {
              should.not.exist(err);
              row.title.should.equal('mega');
              row.body.should.equal('bla');
              return done();
            });
          });
        });
        return describe('loading test data', function() {
          it('should have two records in DB', function(done) {
            return db.loadAllFor('comments', function(err, row) {
              should.not.exist(err);
              row.length.should.equal(2);
              return done();
            });
          });
          return it('should load a record with where call', function(done) {
            return db.where({
              title: 'mega'
            }, 'comments', function(err, records) {
              should.not.exist(err);
              records.should.have.length(1);
              records[0].id.should.equal(1);
              return done();
            });
          });
        });
      });
    });
  });
});
