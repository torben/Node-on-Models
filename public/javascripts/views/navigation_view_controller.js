// Generated by CoffeeScript 1.6.3
namespace("viewControllers");

tt.viewControllers.NavigationViewController = (function() {
  NavigationViewController.prototype.navigationView = null;

  NavigationViewController.prototype.collection = null;

  NavigationViewController.prototype.oldPermalink = null;

  function NavigationViewController(options) {
    if (options == null) {
      options = {};
    }
    this.navigations = options.navigations;
    this.router = options.router;
    this.collection = new Backbone.Collection;
    this.navigationView = new tt.views.NavigationsView({
      collection: this.navigations,
      router: this.router
    });
  }

  NavigationViewController.prototype.setCurrentNavigation = function(currentNavigation) {
    this.navigationView.setCurrentClass(currentNavigation.get("permalink"));
    if (this.oldPermalink != null) {
      $("body").removeClass(this.oldPermalink);
    }
    this.oldPermalink = currentNavigation.get("permalink");
    return $("body").addClass(this.oldPermalink);
  };

  NavigationViewController.prototype.get = function(field, options) {
    return this.navigationView.model.get(field, options);
  };

  NavigationViewController.prototype.set = function(field, options) {
    return this.navigationView.model.set(field, options);
  };

  NavigationViewController.prototype.setView = function(view) {
    var model,
      _this = this;
    this.collection.each(function(model) {
      var oldView;
      oldView = model.get("view");
      return _this.removeModel(model);
    });
    model = new Backbone.Model({
      view: view
    });
    this.collection.add(model);
    return $(".main-container").append(view.render().$el);
  };

  NavigationViewController.prototype.removeModel = function(model) {
    this.collection.remove(model);
    return model.get("view").remove();
  };

  NavigationViewController.prototype.pushView = function(view, effect) {
    var effectIn, effectOut, effectTimeout, i, model, oldModel, oldView, timeout, _i, _ref,
      _this = this;
    if (effect == null) {
      effect = "fade";
    }
    switch (effect) {
      case "bounce":
        effectIn = "bounceInLeft";
        effectOut = "bounceOutRight";
        effectTimeout = 300;
        break;
      case "fade":
        effectIn = "fadeIn";
        effectOut = "fadeOut";
        effectTimeout = 1;
    }
    model = new Backbone.Model({
      view: view
    });
    $(".main-container").prepend(view.render().$el);
    view.$el.hide();
    if (this.collection.length > 1) {
      for (i = _i = 0, _ref = this.collection.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        oldModel = this.collection.models[0];
        if (oldModel == null) {
          continue;
        }
        oldView = oldModel.get("view");
        this.removeModel(oldModel);
      }
    } else if (this.collection.length === 1) {
      oldModel = this.collection.models[0];
      oldView = oldModel.get("view");
      oldView.$el.removeClass(effectIn).addClass(effectOut);
      window.setTimeout((function() {
        return _this.removeModel(oldModel);
      }), 1100);
    }
    this.collection.add(model);
    timeout = this.collection.length > 1 ? effectTimeout : 1;
    return window.setTimeout(function() {
      view.$el.show();
      if (_this.collection.length > 1) {
        return view.$el.addClass(effectIn);
      }
    }, timeout);
  };

  return NavigationViewController;

})();
